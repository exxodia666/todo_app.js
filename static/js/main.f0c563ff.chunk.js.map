{"version":3,"sources":["components/Item.js","components/TodoList.js","actions/actionCreator.js","actions/actions.js","containers/TodoListContainer.js","sessionStorage.js","Store.js","reducers/rootReducer.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","data","completed","liStyle","checkStyle","className","onClick","actions","deleteTodo","id","type","checked","reverseTodo","style","text","TodoListNew","useState","filter","setFilter","input","setInput","placeholder","onChange","e","target","value","addTodo","store","map","item","indexOf","mapItems","payload","connect","state","dispatch","console","log","bindActionCreators","TodoList","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","Store","createStore","action","length","newState","splice","subscribe","stringify","setItem","saveState","getState","App","TodoListContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0c563ff.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles/style.css'\r\n\r\nconst Item = props => {\r\n\r\n    if(props.data.completed === true) { \r\n        var liStyle = { 'textDecoration': 'line-through' }\r\n        var checkStyle = 'checked';\r\n    }\r\n    return(\r\n        <li className = 'todo'>\r\n            <a className = 'delete' onClick = { () => { props.actions.deleteTodo(props.id)} }> Delete</a> \r\n            \r\n            <input type='checkbox' className='checkbox' checked={checkStyle} onClick = { () => { \r\n                props.actions.reverseTodo({ completed: props.data.completed, id: props.id}) \r\n                }\r\n            }/> \r\n\r\n            <div style={liStyle}> \r\n                {props.data.text} \r\n            </div>\r\n        </li>);;\r\n}\r\nexport default Item;","import React, { useState } from 'react'\r\nimport '../styles/style.css'\r\nimport Item from './Item'\r\n\r\n\r\nconst TodoListNew = props => {\r\n    const ALL = 'ALL';\r\n    const COMPLETED = 'COMPLETED';\r\n    const ACTIVE = 'ACTIVE';\r\n    //hook state\r\n    const [filter, setFilter] = useState(ALL);\r\n    const [input, setInput] = useState('');\r\n\r\n    /*Doesn`t work!!!\r\n    document.addEventListener('keydown', (e) => { \r\n      console.log(\"props\");\r\n      console.log(input);\r\n      if(e.code === 'Enter' && input) { \r\n        props.actions.addTodo(input); \r\n        setInput(''); \r\n        e.preventDefault()\r\n      }\r\n    });\r\n    */\r\n\r\n    const mapItems = () => {\r\n      switch(filter) {\r\n        case ALL: return props.store.map((item) => <Item id = {props.store.indexOf(item)} actions = {props.actions} data = {item} />);\r\n        break;\r\n        case COMPLETED: return props.store.filter(item => item.completed === true).map((item) => <Item id = {props.store.indexOf(item)} actions = {props.actions} data = {item} />);\r\n        break;\r\n        case ACTIVE: return props.store.filter(item => item.completed === false).map((item) => <Item id = {props.store.indexOf(item)} actions = {props.actions} data = {item} />);\r\n        break;\r\n      }\r\n      \r\n    }\r\n\r\n    return(\r\n        <div className='App'>\r\n            <input placeholder='Type your task'  type='text' onChange = { e => setInput(e.target.value)} value={input} />\r\n\r\n            <a className='add'  \r\n               onClick = {  () => { \r\n                 if(input) { \r\n                   props.actions.addTodo(input); \r\n                   setInput('');\r\n                  }\r\n                }\r\n              } >\r\n            Add\r\n            </a>\r\n            \r\n            <ul> \r\n              {mapItems()} \r\n            </ul>\r\n\r\n              {/*Todo filtering*/}\r\n              <div className='row'>\r\n                  <a className='filter'  onClick = { () => setFilter(ALL) } >\r\n                  All\r\n                  </a>\r\n                  <a className='filter'  onClick = { () => setFilter(COMPLETED) } >\r\n                  Completed\r\n                  </a>\r\n                  <a className='filter'  onClick = { () =>  setFilter(ACTIVE) } >\r\n                  Active\r\n                  </a>\r\n              </div>\r\n\r\n           </div>\r\n    );\r\n}\r\n\r\nexport default TodoListNew;","import * as actions from './actions'\r\n\r\nexport const addTodo = (payload) => {\r\n    return {\r\n        type: actions.ADD_TODO,\r\n        data: payload\r\n    }\r\n}\r\n\r\nexport const deleteTodo = (payload) => {\r\n    return {\r\n        type: actions.DELETE_TODO,\r\n        data: payload\r\n    }\r\n}\r\n\r\nexport const reverseTodo = (payload) => {\r\n    return {\r\n        type: actions.REVERSE_TODO,\r\n        data: payload\r\n    }\r\n}\r\n","export const ADD_TODO        = 'ADD_TODO';\r\nexport const DELETE_TODO     = 'DELETE_TODO';\r\nexport const COMPLETE_TODO   = 'COMPLETE_TODO';\r\nexport const REVERSE_TODO = 'REVERSE_COMPLETE_TODO';","import TodoList from '../components/TodoList';\r\nimport * as actions from '../actions/actionCreator';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators  } from 'redux';  \r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n      store : state\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    console.log('Container');\r\n    console.log(actions);\r\n    return {\r\n      actions: bindActionCreators(actions, dispatch)\r\n    }\r\n  }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n\r\n\r\n","export const loadState = () => {\r\n    try {\r\n      const serializedState = localStorage.getItem('state');\r\n      if (serializedState === null) {\r\n        return [];\r\n      }\r\n      return JSON.parse(serializedState);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n      const serializedState = JSON.stringify(state);\r\n      localStorage.setItem('state', serializedState);\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n  };","import { createStore } from 'redux';\r\nimport { rootReducer } from './reducers/rootReducer'\r\nimport { loadState, saveState } from './sessionStorage';\r\n\r\nexport const persistedState = loadState();\r\n\r\nexport const Store = createStore(rootReducer, persistedState);\r\n\r\nStore.subscribe( () => { saveState(Store.getState())});","import * as actions from '../actions/actions'\r\nimport { persistedState } from '../Store';\r\n\r\nexport function rootReducer(state = persistedState, action) {\r\n    switch (action.type) {\r\n        case actions.ADD_TODO: \r\n            return [...state, {id: ++state.length, text: action.data, completed: false}];\r\n\r\n        case actions.DELETE_TODO:\r\n            let newState = state;\r\n            newState.splice(action.data, 1);\r\n            return [...newState];\r\n\r\n        case actions.COMPLETE_TODO: \r\n            return { };\r\n\r\n        case actions.REVERSE_TODO: \r\n            let id = action.data.id;\r\n            let completed = action.data.completed;\r\n            if( completed === false ){ \r\n                const newState = state;\r\n                newState[id].completed = true;\r\n                return [...newState];\r\n            } else if ( completed === true){\r\n                const newState = state;\r\n                newState[id].completed = false;\r\n                return [...newState];\r\n            } else { \r\n                return [...state]}\r\n\r\n           \r\n\r\n        default: return state;\r\n    } \r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport TodoListContainer from './containers/TodoListContainer'\nimport { Store } from './Store';\n\nexport default class App extends Component {\n    render() {\n      return(<div>\n                <Provider store = { Store }>\n                    <TodoListContainer />\n                </Provider>\n            </div>\n      );\n    }\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}