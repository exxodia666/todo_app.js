{"version":3,"sources":["components/Item.js","components/TodoList.js","actions/actionCreator.js","actions/actions.js","containers/TodoListContainer.js","sessionStorage.js","Store.js","reducers/rootReducer.js","components/Header.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","liStyle","checkStyle","data","completed","className","type","checked","onClick","actions","reverseTodo","id","style","text","class","aria-label","deleteTodo","aria-hidden","TodoList","state","filter","mapItems","store","map","item","indexOf","addTodo","this","document","addEventListener","e","code","input","value","preventDefault","data-toggle","setState","placeholder","ref","aria-describedby","Component","payload","connect","dispatch","bindActionCreators","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","Store","createStore","action","length","newState","splice","subscribe","stringify","setItem","saveState","getState","Header","to","About","href","title","App","exact","path","TodoListContainer","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01d13d23.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//List Item Component\r\nconst Item = props => {\r\n    //switches styles when todo has been done or not\r\n    let liStyle;\r\n    let checkStyle;\r\n\r\n    if(props.data.completed === true) { \r\n         liStyle = { 'textDecoration': 'line-through' }\r\n         checkStyle = 'checked';\r\n    } else {\r\n         liStyle = {}\r\n         checkStyle = '';\r\n    }\r\n    return(\r\n        <li className=\"list-group-item d-flex justify-content-between note text-break shadow-sm p-4 mb-5 bg-white rounded \" >\r\n                {/*dispatches deleteTodo action*/}\r\n                <div className='row'>\r\n                    <input type='checkbox' \r\n                        className='ml-5 mr-3' \r\n                        checked={checkStyle} \r\n                        onClick = { () => {\r\n                            //dispatches reverseTodo action \r\n                            props.actions.reverseTodo({ completed: props.data.completed, id: props.id})\r\n                        }\r\n                    }/>\r\n                    <h3 className=\"d-inline p-2 bg-primar\" style={liStyle}>{props.data.text}</h3>\r\n                </div>\r\n                <button type=\"button\" class=\"close mr-4\" aria-label=\"Close\" onClick = { () => { \r\n                    //event.preventDefault();\r\n                    props.actions.deleteTodo(props.id)} }>\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n        </li>);;\r\n}\r\nexport default Item;","import React, { Component } from 'react'\r\n\r\nimport Item from './Item';\r\n\r\n\r\nconst ALL = 'ALL';\r\nconst COMPLETED = 'COMPLETED';\r\nconst ACTIVE = 'ACTIVE';\r\nexport default class TodoList extends Component {\r\n  \r\n   state = {\r\n     filter: ALL\r\n    };\r\n\r\n    mapItems = () => {\r\n      switch(this.state.filter) {\r\n        //show all todos\r\n        case ALL:\r\n          return  this.props.store.map((item) => <Item id = { this.props.store.indexOf(item)} actions = { this.props.actions} data = {item} />);\r\n        break;\r\n        //show only completed\r\n        case COMPLETED:  \r\n          return  this.props.store.filter(item => item.completed === true).map((item) => <Item id = { this.props.store.indexOf(item)} actions = {this.props.actions} data = {item} />);\r\n        break;\r\n        //show only active\r\n        case ACTIVE:  \r\n          return  this.props.store.filter(item => item.completed === false).map((item) => <Item id = { this.props.store.indexOf(item)} actions = {this.props.actions} data = {item} />);\r\n        break;\r\n        default: \r\n          return  this.props.store.map((item) => <Item id = { this.props.store.indexOf(item)} actions = { this.props.actions} data = {item} />);\r\n        break;\r\n      }\r\n      \r\n    }\r\n\r\n  render() {\r\n    \r\n    //const appState    = this.props.store;\r\n    const addTodo     = this.props.actions.addTodo;\r\n    //const reverseTodo = this.props.actions.reverseTodo;\r\n    //const deleteTodo  = this.props.actions.deleteTodo;\r\n\r\n    \r\n    document.addEventListener('keydown', (e) => { \r\n      if(e.code === 'Enter' && this.input.value) { \r\n        addTodo(this.input.value); \r\n        this.input.value = ''; \r\n        e.preventDefault()\r\n      }\r\n    });\r\n    let input = '';\r\n    return (\r\n            <div className='container mt-3 mb-3'>\r\n              <div className=\"btn-group btn-group-toggle mt-3 mb-3\" data-toggle=\"buttons\">\r\n                \r\n                  <button type=\"button\" class=\"btn btn-outline-secondary\" onClick = { () => this.setState({filter: ALL}) } >All</button>\r\n                \r\n                  <button type=\"button\" class=\"btn btn-outline-secondary\"onClick = { () => this.setState({filter: COMPLETED}) }>Completed</button>\r\n                \r\n                  <button type=\"button\" class=\"btn btn-outline-secondary\" onClick = { () => this.setState({filter: ACTIVE}) }>Active</button>\r\n                \r\n              </div>\r\n              <>\r\n              <div className=\"input-group mb-3 input-group-lg\">\r\n                <input placeholder='Type your task' \r\n                type='text' \r\n                ref =  { e => this.input = e} \r\n                className=\"form-control\" \r\n                id=\"inputGroup-sizing-lg\"\r\n                aria-label=\"Recipient's username\" \r\n                aria-describedby=\"button-addon2\"/>\r\n                <div className=\"input-group-append\">\r\n                <button className=\"btn btn-outline-success\" \r\n                type=\"button\" \r\n                id=\"button-addon2\"\r\n                onClick = {  () => { if(this.input.value) { addTodo(this.input.value); this.input.value = '';}}}\r\n                >\r\n                  ADD\r\n                </button>\r\n                </div>\r\n              </div>\r\n              </>\r\n              \r\n              <ul className=\"list-group \">  \r\n                {this.mapItems()} \r\n              </ul>\r\n           </div>);\r\n  }\r\n};","import * as actions from './actions'\r\n//add todo tip action creator\r\nexport const addTodo = (payload) => {\r\n    return {\r\n        type: actions.ADD_TODO,\r\n        data: payload\r\n    }\r\n}\r\n//delete todo tip action creator\r\nexport const deleteTodo = (payload) => {\r\n    return {\r\n        type: actions.DELETE_TODO,\r\n        data: payload\r\n    }\r\n}\r\n//make todo tip completed/active action creator\r\nexport const reverseTodo = (payload) => {\r\n    return {\r\n        type: actions.REVERSE_TODO,\r\n        data: payload\r\n    }\r\n}\r\n","//action consts\r\nexport const ADD_TODO        = 'ADD_TODO';\r\nexport const DELETE_TODO     = 'DELETE_TODO';\r\nexport const COMPLETE_TODO   = 'COMPLETE_TODO';\r\nexport const REVERSE_TODO = 'REVERSE_COMPLETE_TODO';","import TodoList from '../components/TodoList';\r\nimport * as actions from '../actions/actionCreator';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators  } from 'redux';  \r\n\r\n//transfers store to react components\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n      store : state\r\n    }\r\n}\r\n//transfers actions to react components\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      actions: bindActionCreators(actions, dispatch)\r\n    }\r\n  }\r\n//connects react and redux\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n\r\n\r\n","export const loadState = () => {\r\n    try {\r\n      const serializedState = localStorage.getItem('state');\r\n      if (serializedState === null) {\r\n        return [];\r\n      }\r\n      return JSON.parse(serializedState);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n      const serializedState = JSON.stringify(state);\r\n      localStorage.setItem('state', serializedState);\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n  };","import { createStore } from 'redux';\r\nimport { rootReducer } from './reducers/rootReducer'\r\nimport { loadState, saveState } from './sessionStorage';\r\n//saves and loads store to localStorage\r\nexport const persistedState = loadState();\r\nexport const Store = createStore(rootReducer, persistedState); \r\nStore.subscribe( () => { saveState(Store.getState())});","import * as actions from '../actions/actions'\r\nimport { persistedState } from '../Store';\r\n\r\nexport function rootReducer(state = persistedState, action) {\r\n    switch (action.type) {\r\n        case actions.ADD_TODO: \r\n            return [...state, {id: ++state.length, text: action.data, completed: false}];\r\n        case actions.DELETE_TODO:\r\n            let newState = state;\r\n            newState.splice(action.data, 1);\r\n            return [...newState];\r\n        case actions.COMPLETE_TODO: \r\n            return { };\r\n        case actions.REVERSE_TODO: \r\n            let id = action.data.id;\r\n            let completed = action.data.completed;\r\n            if( completed === false ){ \r\n                const newState = state;\r\n                newState[id].completed = true;\r\n                return [...newState];\r\n            } else if ( completed === true){\r\n                const newState = state;\r\n                newState[id].completed = false;\r\n                return [...newState];\r\n            } else { \r\n                return [...state]}\r\n        default: return state;\r\n    } \r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n//todo navigation\r\nconst Header = () => {\r\n    return(<nav className=\"navbar navbar-expand-lg navbar-light bg-light\" >\r\n                <Link className=\"nav-item nav-link active navbar-brand\"  to=\"/\">\r\n                    Tips Application\r\n                    <span className=\"sr-only\">\r\n                    (current)\r\n                    </span>\r\n                </Link>\r\n                <Link className=\"nav-item nav-link\" to=\"/about\">\r\n                    About\r\n                </Link>\r\n            </nav>\r\n    )\r\n};\r\nexport default Header;","import React from 'react';\r\n//todo navigation\r\nconst About = () => {\r\n    return(\r\n    <div className='container'>\r\n    <h1 class=\"display-2 m-2\">About</h1>\r\n<ul class=\"list-group list-group-flush\">\r\n    <li class=\"display-6 m-2 list-group-item\"><span>GitHub: </span>\r\n        <a href='https://github.com/exxodia666'>\r\n            https://github.com/exxodia666\r\n        </a>\r\n    </li>\r\n\r\n    <li class=\"display-6 m-2 list-group-item\">\r\n        Icons made by \r\n        <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">\r\n            <span> Freepik </span>\r\n        </a> \r\n        <span> from </span>\r\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n            www.flaticon.com\r\n        </a>\r\n    </li>\r\n</ul>\r\n    \r\n    </div>\r\n    )\r\n};\r\nexport default About;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport TodoListContainer from './containers/TodoListContainer'\nimport { Store } from './Store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport About from './components/About'\n//main component\nconst App = () => {\n      return(<div>\n                <Provider store = { Store }>\n                    <Router>\n                        <Header />\n                        <Switch>\n                        <Route exact path=\"/\">\n                            <TodoListContainer />\n                        </Route>\n                        \n                        <Route path=\"/about\">\n                            <About />\n                        </Route>\n                        </Switch>\n                    </Router>\n                </Provider>\n            </div>);\n};\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}